# Anthropic API Configuration
# Get your API key from: https://console.anthropic.com/settings/keys
ANTHROPIC_API_KEY=your-api-key-here

# Optional: Model configuration
# Uncomment and set to override the default model
# ANTHROPIC_MODEL=claude-3-haiku-20240307
# Available models:
#   - claude-3-haiku-20240307 (Fast, cost-effective)
#   - claude-3-5-sonnet-20240620 (Balanced, recommended if available)
#   - claude-3-opus-20240229 (Most capable)

# Optional: API configuration
# MAX_TOKENS=4096

# Optional: Storage paths
# CONVERSATIONS_DIR=./data/conversations
# TRACES_DIR=./data/traces

# =============================================================================
# MCP (Model Context Protocol) Configuration
# =============================================================================

# MCP Backend Selection
# Enable MCP for external memory/knowledge sources
MCP_ENABLED=false

# Memory backend to use: file, chroma, graphiti, none
# - file: File-based JSON storage (no Docker required)
# - chroma: ChromaDB vector database (requires Docker)
# - graphiti: Graphiti temporal knowledge graph (requires Docker + OpenAI)
# - none: No memory (stateless agent)
MCP_MEMORY_BACKEND=file

# -----------------------------------------------------------------------------
# ChromaDB MCP Server Configuration
# -----------------------------------------------------------------------------
# Vector database for semantic similarity search
# Requires: docker-compose up -d chroma-mcp

MCP_CHROMA_ENABLED=false
MCP_CHROMA_URL=http://localhost:8001/sse
MCP_CHROMA_TRANSPORT=sse
MCP_CHROMA_COLLECTION=agent_memories

# -----------------------------------------------------------------------------
# Graphiti MCP Server Configuration
# -----------------------------------------------------------------------------
# Temporal knowledge graph for entities, relationships, and time-based queries
# Requires: docker-compose up -d graphiti-mcp neo4j

MCP_GRAPHITI_ENABLED=false
MCP_GRAPHITI_URL=http://localhost:8000/sse
MCP_GRAPHITI_TRANSPORT=sse

# Neo4j Configuration (required for Graphiti backend)
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=password123

# OpenAI API Key (required for Graphiti entity extraction)
# Get your key from: https://platform.openai.com/api-keys
# OPENAI_API_KEY=your-openai-key-here

# -----------------------------------------------------------------------------
# Example Configurations
# -----------------------------------------------------------------------------

# Example 1: File-based memory (no Docker, simplest)
# MCP_ENABLED=false
# MCP_MEMORY_BACKEND=file

# Example 2: ChromaDB vector memory (semantic search)
# MCP_ENABLED=true
# MCP_MEMORY_BACKEND=chroma
# MCP_CHROMA_ENABLED=true
# MCP_CHROMA_URL=http://localhost:8001/sse

# Example 3: Graphiti knowledge graph (temporal queries)
# MCP_ENABLED=true
# MCP_MEMORY_BACKEND=graphiti
# MCP_GRAPHITI_ENABLED=true
# MCP_GRAPHITI_URL=http://localhost:8000/sse
# NEO4J_URI=bolt://localhost:7687
# NEO4J_USER=neo4j
# NEO4J_PASSWORD=your-password
# OPENAI_API_KEY=your-openai-key